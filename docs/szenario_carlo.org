* Anwendungsszenario
Die im Rahmen der Studienarbeit implementierte Anwendung stellt ein \ac{POC} dar. Es wurden einige Annahmen getroffen, die die Anwendung für den Einsatz unter realen Bedingungen ungeeignet machen. So erwartet die Anwendung eine Route als Eingabe, die aus einzelnen Tankstellen, sowie der Ankunftszeit an diesen Tankstellen besteht. Auch wurde keine Rücksicht darauf genommen, dass sich die Daten, die der Preisberechnung zugrunde liegen ständig ändern. Dieses Kapitel ist ein Gedankenexperiment, um die Schritte aufzuzeigen, die im Falle einer realen Verwendung der Anwendung nötig wären. Um dies zu erreichen wird zuerst ein reales Einsatzszenarion definiert und anschließend werden die erforderlichen Schritte näher erläutert.

** Definition des Szenarios
Es ist recht unrealistisch, dass ein Benutzer Autoreisen plant indem er sämtliche Tankstellen entlang seiner Route ermittelt und die jeweilige Ankunftszeit an den Tankstellen berechnet. Eine bessere \ac{UX} wäre es die Kalenderdaten des Benutzers abzufragen. Auf Basis der Termine im Kalender kann eine optimale Route berechnet werden.

Es wird die Annahme getroffen, dass die Termine im Kalender jeweils mit einer Adresse versehen sind und dass die Strecke von Termin zu Termin jeweils mit dem Auto bewältigt wird. Die Anwendung könnte so die optimale Route und Tankstrategie für einen gewissen Planungshorizont berechnen.

Dieser Anwendungsfall könnte auch von Privatpersonen auf Speditionen übertragen werden, um die Treibstoffkosten im Güterverkehr zu senken.

** Anpassung des Algorithmus
Damit die Anwendung für dieses Szenario geeignet ist, müssen mehrere Teile angepasst werden. Die Anwendung verwendet bereits \ac{OSM} Daten, um weitere Features für die einzelnen Tankstellen zu ermitteln. Momentan werden hierfür lediglich Daten für Autobahnen, Schnell- und Bundesstraßen, Landes- und Kreisgrenzen verwendet. Diese Daten reichen für die erweiterten Anforderungen des Szenarios nicht aus.

Um die Routen zwischen den einzelnen Terminen zu ermitteln kann /PostgreSQL/PostGIS/ durch /pgRouting/ [fn::http://www.pgrouting.org] erweitert werden. Diese Erweiterung benötigt als Grundlage einen gewichteten Graphen. Dieser Graph kann aus \ac{OSM}-Daten erstellt werden.

Um eine Route zu ermitteln benötigt /pgRouting/ jeweils die Id des Start- und Endknoten des Graphen. Deshalb muss es möglich sein von \ac{OSM}-Geometrien auf die entsprechende Id des Knoten zu schließen. Da der Benutzer seine Route anhand von Adressen in das System eingibt müssen diese zuerst in Geokoordinaten umgewandelt werden. Dieser Vorgang nennt sich /reverse geocoding/ und ist auch auf Basis von \ac{OSM}-Daten möglich. Dazu kann die Software /Nominatim/ [fn::http://www.nominatim.org] verwendet werden. Die Geokoordinaten der Adresse genügen zur Ermittlung der Ids jedoch noch nicht. In einem weiteren Schritt muss die nächste Geometrie, die eine Repräsentierung im Graphen besitzt, ermittelt werden. Zur Beschleunigung dieser Query empfiehlt sich der Einsatz eines spatial index.

Um den Suchraum für die Route einzuschränken, empfiehlt es sich nur einen Teil des Graphen auszuwerten. Dies kann erreicht werden indem nur Knoten und Kanten verwendet werden, deren Geometrie innerhalb einer Bounding Box liegen. Eine einfache Lösung zur Ermittlung der Bounding Box wäre es die Koordinaten des Start- und Endpunktes zu ermitteln und ein Rechteck um diese zu legen und anschließend um einen Puffer zu erweitern.

Nachdem die optimale Route zwischen den Terminen ermittelt wurde geht es im nächsten Schritt darum Tankstellen entlang dieser Route zu finden. Die Route besteht aus Kanten des gewichteten Graphen und muss zuerst wieder in eine Geometrie übersetzt werden. Mit dieser Geometrie ist es möglich Tankstellen in einer gewissen Entfernung über einen Join der Tankstellen Tabelle zu ermitteln. Die gewünschte maximale Entfernung kann dabei im Join-Prädikat angegeben werden.

Im nächsten Schritt werden für die Tankstellen die entsprechenden Knoten der Routing-Datenbasis ermittelt. Es kann sein, dass diese Knoten noch nicht im Subgraphen, der für die Ermittlung der Route verwendet wurde enthalten sind. In diesem Fall muss der Subgraph erweitert werden. Mit diesen Daten kann nun die zu erwartende Ankunftszeit an den Tankstellen ermittelt werden. Über die Ankunftszeit kann anschließend der Preis vorhergesagt werden.

Der Graph mit der Route, Tankstellen und Preisen kann anschließend ausgewertet werden, um eine optimale Tankstrategie zu ermitteln. Dazu kann der Algorithmus von Lin \cite{transnet} verwendet werden. Der Algorithmus weist eine Zeitkomplexität von $O(n^3)$ auf, wobei $n$ die Anzahl an Knoten im Graphen bezeichnet. Dies kann bei langen Routen zu einer sehr hohen Laufzeit führen. Es wäre zu prüfen, ob eine Optimierung durch die Verwendung von evolutionären Algorithmen zu schnelleren Ergebnissen ähnlicher Güte führt.

Im nächsten Abschnitt wird aufgezeigt welche Daten für den angepassten Algorithmus verwendet werden und wie diese aktuell gehalten werden können

** Daten und ihre Änderungen
Zur Berechnung der optimalen Route werden die \ac{OSM}-Daten Deutschlands benötigt. Damit /pgRouting/ mit den Daten umgehen kann müssen sie in einen gewichteten Graphen umgewandelt werden. Dies kann mit der Funktion =pgr_createTopology= erledigt werden. Abbildung \ref{fig:osminitial} veranschaulicht diesen Vorgang.

#+CAPTION: Initiales Laden von OSM Daten in die Datenbank und Erstellung eines gewichteten Graphen zur Routenberechnung
#+NAME: fig:osminitial
[[file:osm-data-initial.png]]

Die \ac{OSM}-Daten können inkrementell geupdatet werden. Hierzu stellt \ac{OSM} sogenannte /change sets/ zur Verfügung. Diese /changesets/ können mit einem Werkzeug wie /osmosis/ [fn::https://wiki.openstreetmap.org/wiki/Osmosis] in die Datenbank eingelesen werden. Der gewichtete Graph muss bei jeder Änderung der Ursprungsdaten komplett neu berechnet werden.

Die /changesets/ sind zum Beispiel als \ac{XML}-Dateien mit einer minütlichen Auflösung erhältlich. Da eine minütliche Neuberechnung des gewichteten Graphen nicht praktikabel erscheint, können die /changesets/ gesammelt und in einem täglichen oder wöchentlichen Intervall aufgespielt werden. Dieser Vorgang wird in Abbildung \ref{fig:osmdata} gezeigt. Die /changesets/ werden im /changeset buffer/ zwischengespeichert. Täglich oder wöchentlich werden sie mit /Osmosis/ in die Geometrie-Tabelle übernommen. Daraufhin wird der /changeset buffer/ geleert und der gewichtete Graph wird durch =pgr_createTopology= neu erstellt. Der Parameter =clean= sorgt dafür, dass die entsprechende Tabelle davor geleert wird.

#+CAPTION: Update der OSM Geometrien und Neuberechnung des gewichteten Graphen
#+NAME: fig:osmdata
[[file:osm-data-update.png]]


* outline todo remove
- Einleitung/Motivation für Kapitel
- Definition von realen Bedingungen
- Gedankenexperiment zur Erfüllung der realen Bedingungen
  - reales Anwendungsszenario mit Einschränkung (kein Logging, Usermanagement etc)
  - Definition der benötigten Daten und festlegen der Updatehäufigkeit
  - Abhängigkeiten der Anwendung auf diese Daten
  - Strategie zur Neuberechnung/Änderung von Teilen der Anwendung
  - Skalierbarkeit
- Ausblick: Probleme an 'realem Szenario'
- weitere Möglichkeiten zur Verbesserung
  - realer Verbrauch mit Feedback
  - reale Preise mit Feedback
* Todos
** TODO checken, ob orgmode footnotes in tex ankommen
** TODO bild erstellen, um routing, geocoding, bbox etc. zu erklären. im text bezug auf grafik einbauen
